@startuml
'https://plantuml.com/class-diagram

abstract class AbstractFlyingObject
{
    # locationX:int
    # locationY:int
    # speedX:int
    # speedY:int
    # image:BufferedImage
    # width:int
    # height:int
    # isValid:boolean

    + AbstractFlyingObject(int locationX, int locationY, int speedX, int speedY)
    + forward():void
    + crash(AbstractFlyingObject flyingObject):boolean
    + setLocation(double locationX, double locationY):void
    + getLocationX():int
    + getLocationY():int
    + getSpeedY():int
    + getImage():BufferedImage
    + getWidth():int
    + getHeight():int
    + notValid():boolean
    + vanish():void
}
abstract class AbstractAircraft
{
	# maxHp:int
    # hp:int
    + AbstractAircraft(int locationX, int locationY, int speedX, int speedY, int hp)
    + decreaseHp(int decrease):void
    + increaseHp(int increase):void
    + getHp():int
    + {abstract} shoot():List<BaseBullet>
 }

class EliteEnemy {
    - shootNum:int
    - power:int
    - direction:int
    + EliteEnemy(int locationX, int locationY, int speedX, int speedY, int hp)
    + forward():void
    + shoot():List<BaseBullet>
}

AbstractAircraft <|-- EliteEnemy

class HeroAircraft {
    - shootNum:int
    - power:int
    - direction:int
    + HeroAircraft(int locationX, int locationY, int speedX, int speedY, int hp)
    + forward():void
    + shoot():List<BaseBullet>
}

AbstractAircraft <|-- HeroAircraft

class MobEnemy {
    + MobEnemy(int locationX, int locationY, int speedX, int speedY, int hp)
    + forward():void
    + shoot():List<BaseBullet>
}
AbstractAircraft <|-- MobEnemy

abstract class BaseBullet
{
    - power:int
    + BaseBullet(int locationX, int locationY, int speedX, int speedY, int power)
    + forward():void
	+ getPower():int
}

class HeroBullet {
    + HeroBullet(int locationX, int locationY,
     int speedX, int speedY, int power)
}

class EnemyBullet {
    + EnemyBullet(int locationX, int locationY,
     int speedX, int speedY, int power)
}

BaseBullet <|-- HeroBullet
BaseBullet <|-- EnemyBullet

abstract class AbstractProp
{
    + AbstractProp(int locationX, int locationY,
    int speedX, int speedY)
    + forward():void
    + {abstract} func(AbstractAircraft aircraft):void
    + {abstract} print_func():void
}

class BloodProp {
    + BloodProp(int locationX, int locationY,
    int speedX, int speedY)
    + func(AbstractAircraft aircraft):void
    + print_func():void
}

AbstractProp <|-- BloodProp

class BombProp {
    + BombProp(int locationX, int locationY,
    int speedX, int speedY)
    + func(AbstractAircraft aircraft):void
    + print_func():void
}

AbstractProp <|-- BombProp

class BulletProp {
    + BulletProp(int locationX, int locationY,
    int speedX, int speedY)
    + func(AbstractAircraft aircraft):void
    + print_func():void
}

AbstractProp <|-- BulletProp

AbstractFlyingObject <|-- AbstractAircraft
AbstractFlyingObject <|-- BaseBullet
AbstractFlyingObject <|-- AbstractProp

@enduml